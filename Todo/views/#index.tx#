: cascade base
: around content -> {
<div id="input-success" class="alert alert-success fade in" style="display:none;">
    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    <strong>Success!!</strong> Your submit is success.
</div>
<div id="input-validate" class="alert alert-danger fade in" style="display:none;">
    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    Text needs. Please check and try again.
</div>
<form id="input-form" role="form">
    <div class="form-group" id="main-textarea">
    	<label>ToDo</label>
        <textarea class="form-control" rows="5"></textarea>
    </div>
    <div class="form-group" id="due">
    	<label>Due</label>
    	<input class="form-control" value="2013-10-01 23:59:59" />
    </div>
    <div class="form-group">
        <span id="num-count">0</span>
    </div>
    <button id="submit-btn" type="submit" class="btn btn-primary">Submit</button>
</from>

<form class="preview" role="from">
: for $todos -> $todo {
    <div class="form-group preview-area" data-id="<:$todo.id:>">
    <hr />
    	 <pre class="todo_text prettyprint linenums:1">
	 <: $todo.text :>
	 </pre>
	 <p class="due_disp">due at <: $todo.due_at :></p>
	 <div class="edit-form" id="edit-area" data-id="<:$todo.id:>" style="display:none">
	      <label>ToDo</label>
	      <div class="main-textarea">
			<textarea class="form-control" rows="5" value="<: $todo.text :>"></textarea>
	      </div>
	      <div class="form-group due">
	      	<label>Due</label>
  		<input class="form-control" value="<: $todo.due_at :>" />
   	      </div>
	 </div>
	 <button type="submit" class="edit btn-primary btn">edit</button>
	 <button class="save btn-primary btn" type="submit" style="display:none">submit</button>
	 <button type="reset" class="delete btn">&times</button>
    </div>
: }

 <div class="form-group preview-area" data-id="" style="display:none">
    <hr />
    	 <pre class="todo_text prettyprint linenums:1">
	 </pre>
	 <p class="due_disp">due at </p>
	 <div class="edit-form" id="edit-area" data-id="" style="display:none">
	      <label>ToDo</label>
	      <div class="main-textarea">
			<textarea class="form-control" rows="5" value="<: $todo.text :>"></textarea>
	      </div>
	      <div class="form-group due">
	      	<label>Due</label>
  		<input class="form-control" value="" />
   	      </div>
	 </div>
	 <button type="submit" class="edit btn-primary btn">edit</button>
	 <button class="save btn-primary btn" type="submit" style="display:none">submit</button>
	 <button type="reset" class="delete btn">&times</button>
    </div>

</form>

 

<script>
$(function(){
    $("#main-textarea textarea").bind("change keyup", function(){
        var count = $(this).val().length;
        $("#num-count").text(count);
    });

    $('#input-form').submit(function(event) {
        // HTMLでの送信をキャンセル
        event.preventDefault();

        // 操作対象のフォーム要素を取得
        var $form = $(this);

        // 送信ボタンを取得
        var $button = $form.find('#submit-btn');

        // 送信
        $.ajax({
            url: "<: $c.req.uri_for('/add') :>",
            type: 'POST',
            data: {text: $form.find('#main-textarea textarea').val(),
	    	   due_at: $form.find('#due input').val()},
            timeout: 10000,  // 単位はミリ秒

            // 送信前
            beforeSend: function(xhr, settings) {
                // ボタンを無効化し、二重送信を防止
                $button.attr('disabled', true);
                $('#input-validate').hide();
                $form.find("#main-textarea").removeClass('has-error');
            },
            // 応答後
            complete: function(xhr, textStatus) {
                // ボタンを有効化し、再送信を許可
                $button.attr('disabled', false);
            },

            // 通信成功時の処理
            success: function(result, textStatus, xhr) {
                if (result["response"]) {
                    $form[0].reset();
                    $("#num-count").text(0);
                    $('#input-success').fadeIn();
                }
                else {
                    $('#input-validate').fadeIn();
                    $form.find("#main-textarea").addClass('has-error');
                }
            },

            // 通信失敗時の処理
            error: function(xhr, textStatus, error) {
                alert('Connection refuse.');
            }
        });
    });
    $('.delete').click(function() {
        // 削除の確認ダイアログを表示
        if (!window.confirm('削除しますか？')) return false;
        var $root = $(this).closest('.form-group');
        var todoId = $.trim($root.data('id'));
        var isNum = todoId.match(/^[0-9]+$/);
        // 取得したidが数値でなければリターン
        if (!isNum) return false;
        $.ajax({
            url: "<: $c.req.uri_for('/delete') :>",
            type: 'POST',
            data: {id: todoId},
            timeout: 10000,  // 単位はミリ秒

            // 送信前
            // beforeSend: function(xhr, settings) {
            //     // ボタンを無効化し、二重送信を防止
            //     $button.attr('disabled', true);
            //     $('#input-validate').hide();
            //     $form.find("#main-textarea").removeClass('has-error');
            // },
            // 応答後
            complete: function(xhr, textStatus) {
                // ボタンを有効化し、再送信を許可
                //$button.attr('disabled', false);
            },

            // 通信成功時の処理
            success: function(result, textStatus, xhr) {
                if (result["response"]) {
                    $root.fadeOut();
                }
                else {
                    alert("DBでエラーが発生しました。");
                }
            },

            // 通信失敗時の処理
            error: function(xhr, textStatus, error) {
                alert('Connection refuse.');
            }
        });

    });

    $('.edit').click(function() {
    	var $root = $(this).closest('.preview-area');
	$root.find('.edit-form').show();
	$root.find('.edit').hide();
	$root.find('.save').show();
    });

    $('.save').click(function() {
        // 確認ダイアログを表示
        if (!window.confirm('更新しますか？')) return false;
        var $root = $(this).closest('.form-group');
        var todoId = $.trim($root.data('id'));
        var isNum = todoId.match(/^[0-9]+$/);
        // 取得したidが数値でなければリターン
        if (!isNum) return false;
        var $textArea = $root.find('.main-textarea textarea');
        var $dueArea  = $root.find('.due input');

	var $prevArea = $(this).closest('.preview-area');
	$prevArea.find('.edit-form').hide();
	$prevArea.find('.edit').show();
	$prevArea.find('.save').hide();   

        var text = $textArea.val();
        var due  = $dueArea.val();
        $.ajax({
            url: "<: $c.req.uri_for('/update') :>",
            type: 'POST',
            data: {id: todoId, text: text, due_at: due},
            timeout: 10000,  // 単位はミリ秒

            // 送信前
            beforeSend: function(xhr, settings) {
                // ボタンを無効化し、二重送信を防止
              //  $button.attr('disabled', true);
             //   $('#input-validate').hide();
              //  $form.find("#main-textarea").removeClass('has-error');
            },
            // 応答後
            complete: function(xhr, textStatus) {
                // ボタンを有効化し、再送信を許可
                $button.attr('disabled', false);
            },

            //通信成功時の処理
            success: function(result, textStatus, xhr) {
                var res = result["response"]
                if (res) {
	            $root.find('.todo_text').text() = text;
		}
                else {
                    alert("DBでエラーが発生しました。");
                }
            },

            // 通信失敗時の処理
            error: function(xhr, textStatus, error) {
                alert('Connection refuse.');
            }
        });

    });
});
</script>
: }

